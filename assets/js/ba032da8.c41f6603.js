"use strict";(self.webpackChunkorwell_docs=self.webpackChunkorwell_docs||[]).push([[384],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=u(n),d=o,f=m["".concat(p,".").concat(d)]||m[d]||c[d]||a;return n?r.createElement(f,l(l({ref:t},s),{},{components:n})):r.createElement(f,l({ref:t},s))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var u=2;u<a;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4432:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return c}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),l=["components"],i={sidebar_position:7,custom_edit_url:null},p="Python Package",u={unversionedId:"pythonPackage",id:"pythonPackage",title:"Python Package",description:"About",source:"@site/docs/pythonPackage.md",sourceDirName:".",slug:"/pythonPackage",permalink:"/documentation/pythonPackage",editUrl:null,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"PerfSonar Utils",permalink:"/documentation/metrics-export/perfsonar"},next:{title:"Metrics Translators",permalink:"/documentation/translators"}},s={},c=[{value:"About",id:"about",level:2},{value:"Development",id:"development",level:2},{value:"Usage",id:"usage",level:2},{value:"Command-Line Mode",id:"command-line-mode",level:3},{value:"Server Mode",id:"server-mode",level:3},{value:"Production Mode",id:"production-mode",level:3},{value:"Pull Mode",id:"pull-mode",level:3}],m={toc:c};function d(e){var t=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"python-package"},"Python Package"),(0,a.kt)("h2",{id:"about"},"About"),(0,a.kt)("p",null,"Orwell is an open-source platform that allows you to integrate different metrics collectors into one large super-system, storing the data from different sources in Prometheus' format."),(0,a.kt)("p",null,"With that goal in mind, this package tries to facilitate as much as possible the task of creating translator services compatible with Orwell's architecture."),(0,a.kt)("h2",{id:"development"},"Development"),(0,a.kt)("p",null,"If a given service's output follows the scheme \"",(0,a.kt)("inlineCode",{parentName:"p"},"host"),",",(0,a.kt)("inlineCode",{parentName:"p"},"metric"),",",(0,a.kt)("inlineCode",{parentName:"p"},"value"),'", its translator could be built with the following example:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"from orwell import Metric, Runner\n\n\n# The translator function should be able to receive multiple lines\n# of the desired service output and return a list of Metric objects\n\ndef translate (lines: str) -> list[Metric]:\n  metrics = [ line.split(',') for line in lines.split('\\n') ]\n  return [ Metric(metric, value, { 'host': host }) for host, metric, value in metrics ]\n\n\ntranslator = Runner(translate)\ntranslator.run()\n\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"With the example given above we now have three options for running the service:"),(0,a.kt)("h3",{id:"command-line-mode"},"Command-Line Mode"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"python main.py cmd <output>")),(0,a.kt)("p",null,"The output will be processed and printed."),(0,a.kt)("h3",{id:"server-mode"},"Server Mode"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"python main.py server")),(0,a.kt)("p",null,"A Flask server will start accepting POST requests for /metrics.\nThe body of the request must be a dictionary with the only key ",(0,a.kt)("inlineCode",{parentName:"p"},"metrics"),".\nThe response will be the processed output whenever the status code is 200."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Environment Variables")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"FLASK_HOST"),"\n",(0,a.kt)("strong",{parentName:"p"},"Default"),' "localhost"'),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"FLASK_PORT"),"\n",(0,a.kt)("strong",{parentName:"p"},"Default"),' "5000""'),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"FLASK_DEBUG"),"\nIf set the server will start in debug mode."),(0,a.kt)("h3",{id:"production-mode"},"Production Mode"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"python main.py prod")),(0,a.kt)("p",null,"This is the most important mode as it allows to read messages from Kafka and write them to a Redis database, according to the Orwell's architecture."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Environment Variables")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"REDIS_HOST"),"\n",(0,a.kt)("strong",{parentName:"p"},"Default"),' "localhost"'),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"REDIS_PASSWORD"),"\n",(0,a.kt)("strong",{parentName:"p"},"Default"),' "root"'),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"KAFKA_HOST"),"\n",(0,a.kt)("strong",{parentName:"p"},"Default"),' "localhost""'),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"KAFKA_PORT"),"\n",(0,a.kt)("strong",{parentName:"p"},"Default")," 9093"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"KAFKA_TOPIC"),"\n",(0,a.kt)("strong",{parentName:"p"},"Default"),' "general"'),(0,a.kt)("h3",{id:"pull-mode"},"Pull Mode"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"python main.py pull")),(0,a.kt)("p",null,"This mode allows gathering data from a custom endpoint."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Environment Variables")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"PULL_ENDPOINT")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"PULL_INTERVAL"),"\n",(0,a.kt)("strong",{parentName:"p"},"Default"),' "localhost"'),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"REDIS_PASSWORD"),"\n",(0,a.kt)("strong",{parentName:"p"},"Default"),' "root"'))}d.isMDXComponent=!0}}]);