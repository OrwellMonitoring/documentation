"use strict";(self.webpackChunkorwell_docs=self.webpackChunkorwell_docs||[]).push([[787],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return f}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(r),f=o,h=d["".concat(l,".").concat(f)]||d[f]||u[f]||a;return r?n.createElement(h,i(i({ref:t},p),{},{components:r})):n.createElement(h,i({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},999:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],s={sidebar_position:8,custom_edit_url:null},l="Metrics Translators",c={unversionedId:"translators",id:"translators",title:"Metrics Translators",description:"This repository holds all the different translator scripts built for reading different Kafka topics and outputing valid Prometheus format.",source:"@site/docs/translators.md",sourceDirName:".",slug:"/translators",permalink:"/documentation/translators",editUrl:null,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8,custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"Python Package",permalink:"/documentation/pythonPackage"}},p={},u=[{value:"Developing New Translators",id:"developing-new-translators",level:2},{value:"Current Translators",id:"current-translators",level:2},{value:"eSight Translators",id:"esight-translators",level:3},{value:"PerfSonar Translator",id:"perfsonar-translator",level:3},{value:"Prometheus&#39; Node Exporter Translator",id:"prometheus-node-exporter-translator",level:3},{value:"Gnocchi Translator",id:"gnocchi-translator",level:3},{value:"Telegraf Translator",id:"telegraf-translator",level:3}],d={toc:u};function f(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"metrics-translators"},"Metrics Translators"),(0,a.kt)("h1",{id:"orwell-translators"},"Orwell Translators"),(0,a.kt)("p",null,"This repository holds all the different translator scripts built for reading different Kafka topics and outputing valid Prometheus format."),(0,a.kt)("p",null,"Translators were written using Orwell's ",(0,a.kt)("a",{parentName:"p",href:"https://pypi.org/project/orwell-translators/"},"Python package")," and, therefore, they can all be executed with the arguments and evironment variables, which are documented in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/OrwellMonitoring/orwell-python-package/blob/v1/README.md"},"package's repository"),". "),(0,a.kt)("h2",{id:"developing-new-translators"},"Developing New Translators"),(0,a.kt)("p",null,"The process of creating a new translator, the script itself, is described in both PyPI's project description and the package's repository. After that, a new folder should be created for that translator with a ",(0,a.kt)("inlineCode",{parentName:"p"},"main.py")," script and a ",(0,a.kt)("inlineCode",{parentName:"p"},"requirements.txt")," file. "),(0,a.kt)("p",null,"Adding a reference to that folder inside of ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," and pushing the changes to the repository is all that is required for triggering the CD pipeline and deploying the updated translators in the configured machine(s)."),(0,a.kt)("h2",{id:"current-translators"},"Current Translators"),(0,a.kt)("h3",{id:"esight-translators"},"eSight Translators"),(0,a.kt)("p",null,"Two translators are provided for eSight metrics, one for the interfaces and another for the routers. These metrics are generated from a ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/OrwellMonitoring/esight_connector"},"custom connector"),"."),(0,a.kt)("h3",{id:"perfsonar-translator"},"PerfSonar Translator"),(0,a.kt)("p",null,"Translation of network metrics pushed from a ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/OrwellMonitoring/perfsonar-utils/tree/main/pull-service"},"custom connector"),"."),(0,a.kt)("h3",{id:"prometheus-node-exporter-translator"},"Prometheus' Node Exporter Translator"),(0,a.kt)("p",null,"Despite these metrics already coming in the desired format, this translator is responsible for reading from Kafka and writing to Redis."),(0,a.kt)("h3",{id:"gnocchi-translator"},"Gnocchi Translator"),(0,a.kt)("p",null,"This translator is the responsible for the metrics that come directly from the OpenStack hypervisor. Metrics are pushed to Kafka from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/OrwellMonitoring/orwell-core/tree/main/middleware/app/gnocchi"},"Orwell's core")," and its output follow the same nomenclature of Prometheus' Node Exporter's metrics."),(0,a.kt)("h3",{id:"telegraf-translator"},"Telegraf Translator"),(0,a.kt)("p",null,"Translator for the Telegraf tool, which more than exporting Prometheus' format, rearranges its metrics so as that its metrics follow the same nomenclature of Prometheus' Node Exporter's."))}f.isMDXComponent=!0}}]);