"use strict";(self.webpackChunkorwell_docs=self.webpackChunkorwell_docs||[]).push([[425],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),f=o,m=d["".concat(c,".").concat(f)]||d[f]||p[f]||i;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2670:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],l={sidebar_position:2,custom_edit_url:null},c="Infection Monkey",s={unversionedId:"security/infection-monkey",id:"security/infection-monkey",title:"Infection Monkey",description:"Infection Monkey is a network breaching simulation tool which finds and reports flaws and exploits in the nodes of a network. A guide to setup an Infection Monkey server can be found here",source:"@site/docs/security/infection-monkey.md",sourceDirName:"security",slug:"/security/infection-monkey",permalink:"/documentation/security/infection-monkey",editUrl:null,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"Suricata",permalink:"/documentation/security/suricata"},next:{title:"How to create an OS boot service",permalink:"/documentation/metrics-export/create-os-boot-service"}},u={},p=[{value:"REST API",id:"rest-api",level:2},{value:"Infection Monkey in ORWELL&#39;s proof of concept",id:"infection-monkey-in-orwells-proof-of-concept",level:2}],d={toc:p};function f(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"infection-monkey"},"Infection Monkey"),(0,i.kt)("p",null,"Infection Monkey is a network breaching simulation tool which finds and reports flaws and exploits in the nodes of a network. A guide to setup an Infection Monkey server can be found ",(0,i.kt)("a",{parentName:"p",href:"https://www.guardicore.com/infectionmonkey/docs/setup/"},"here")),(0,i.kt)("h2",{id:"rest-api"},"REST API"),(0,i.kt)("p",null,"Since this service does not provide an API, the ORWELL team developed a selenium based REST API using the Fast API framework to interact with the Monkey server as a standalone, also open-source, project. The code can be found in our repositories (",(0,i.kt)("a",{parentName:"p",href:"https://github.com/OrwellMonitoring/infection-monkey-api"},"here"),").\nThe functionalities developed are the following:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Endpoint"),(0,i.kt)("th",{parentName:"tr",align:null},"Functionality"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"/configs"),(0,i.kt)("td",{parentName:"tr",align:null},"List available config files")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},'/run/"config_file"'),(0,i.kt)("td",{parentName:"tr",align:null},"Start monkey breaching simulation with desired config file")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"/kill"),(0,i.kt)("td",{parentName:"tr",align:null},"Abort all operations")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"/reset"),(0,i.kt)("td",{parentName:"tr",align:null},"Reset Monkey environment")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"/docs"),(0,i.kt)("td",{parentName:"tr",align:null},"Documentation")))),(0,i.kt)("p",null,"At the time of writing, API authentication was not taken into consideration in this project. For secuirty reasons, the service shouldn't be deployed on a public network."),(0,i.kt)("h2",{id:"infection-monkey-in-orwells-proof-of-concept"},"Infection Monkey in ORWELL's proof of concept"),(0,i.kt)("p",null,"An Infection Monkey server was deployed using docker in a node of IT's network. For proof of concept purposes, tests were run in an isolated subnet, populated with vulnerable machines, which the application successfully identified and breached."),(0,i.kt)("p",null,"The IM server is running on the address 10.0.13.181, port 5000 while the REST API is on the same address, port 8000."),(0,i.kt)("p",null,"Although not integrated with any particular component, with our API, Infection Monkey can be used for automation purposes within a Testbed context, such as scheduling simulations or pushing logs to an external channel."))}f.isMDXComponent=!0}}]);