"use strict";(self.webpackChunkorwell_docs=self.webpackChunkorwell_docs||[]).push([[8018],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return c}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),m=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=m(n),c=a,h=d["".concat(s,".").concat(c)]||d[c]||u[c]||o;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var m=2;m<o;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8315:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={sidebar_position:1,custom_edit_url:null},s="System Agents",m={unversionedId:"deployment/system-agents",id:"deployment/system-agents",title:"System Agents",description:"ORWELL's main lifecycle depends on the communication of three big layers: the Storage/Visualization layer, the Middleware layer and the Translators layer. The deployment process revolves around containerizing the components that form each layer, providing a configurable environment for easy integration and adaptation to infrastructure changes.",source:"@site/docs/deployment/system-agents.md",sourceDirName:"deployment",slug:"/deployment/system-agents",permalink:"/documentation/deployment/system-agents",editUrl:null,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"SD Configuration",permalink:"/documentation/service_discovery/configuration"},next:{title:"Create a Page",permalink:"/documentation/tutorial-basics/create-a-page"}},p={},u=[{value:"Storage/Visualization",id:"storagevisualization",level:2},{value:"Deployment",id:"deployment",level:4},{value:"Environment",id:"environment",level:4},{value:"Middleware",id:"middleware",level:2},{value:"Deployment",id:"deployment-1",level:4},{value:"Environment",id:"environment-1",level:4}],d={toc:u};function c(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"system-agents"},"System Agents"),(0,o.kt)("p",null,"ORWELL's main lifecycle depends on the communication of three big layers: the Storage/Visualization layer, the Middleware layer and the Translators layer. The deployment process revolves around containerizing the components that form each layer, providing a configurable environment for easy integration and adaptation to infrastructure changes.  "),(0,o.kt)("h2",{id:"storagevisualization"},"Storage/Visualization"),(0,o.kt)("p",null,"This layer is composed of two services, a Prometheus instance which will contain the centralized metrics of the monitoring targets, integrated with Grafana, used for user visualization."),(0,o.kt)("h4",{id:"deployment"},"Deployment"),(0,o.kt)("p",null,"In our original deployment, this layer was running in a single machine, with the following docker-compose:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"services:\n  prometheus:\n    image: prom/prometheus:latest\n    volumes:\n      - ./prometheus/:/etc/prometheus/\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n    ports:\n      - 9090:9090\n    restart: always\n\n  grafana:\n    image: grafana/grafana\n    depends_on:\n      - prometheus\n    ports:\n      - 3000:3000\n    restart: always\n")),(0,o.kt)("h4",{id:"environment"},"Environment"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Variable"),(0,o.kt)("th",{parentName:"tr",align:null},"Used By"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"MIDDLEWARE_ENDPOINT"),(0,o.kt)("td",{parentName:"tr",align:null},"Prometheus"),(0,o.kt)("td",{parentName:"tr",align:null},"The endpoint Prometheus will use to fetch the metrics from the middleware (HTTP)")))),(0,o.kt)("h2",{id:"middleware"},"Middleware"),(0,o.kt)("p",null,"The middleware is the core of our system. We refer to Middleware as the aggregation of components that make possible the exporting of metrics to reach the Prometheus database, which are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"REST API developed with FastAPI framework."),(0,o.kt)("li",{parentName:"ul"},"Redis cluster to cache exported metrics."),(0,o.kt)("li",{parentName:"ul"},"Kafka broker to better aggregate and handle the various translators' metric stream."),(0,o.kt)("li",{parentName:"ul"},"Postgres Database to store information about targets.")),(0,o.kt)("h4",{id:"deployment-1"},"Deployment"),(0,o.kt)("p",null,"All middleware components are deployed in the same machine. All these components could, however, be running on different machines, even different networks."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'services:\n  api:\n    build: ./middleware\n    depends_on:\n      postgres:\n        condition: service_healthy\n      redis:\n        condition: service_healthy\n    env_file: ./.env\n    environment:\n      - POSTGRES_HOST=postgres\n      - POSTGRES_DB=$POSTGRES_DB\n      - POSTGRES_USER=$POSTGRES_USER\n      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD\n      - REDIS_HOST=redis\n      - REDIS_PASSWPRD=$REDIS_PASSWORD\n    ports:\n      - $API_PORT:8000\n    healthcheck:\n      test: ["CMD-SHELL", "curl", "localhost:8000/"]\n      interval: 1s\n      timeout: 3s\n      retries: 30\n\n\n  postgres:\n    image: postgres:14.1-alpine\n    env_file: ./.env\n    environment:\n      - PGUSER=$POSTGRES_USER\n      - POSTGRES_DB=$POSTGRES_DB\n      - POSTGRES_USER=$POSTGRES_USER\n      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD\n    ports:\n      - $POSTGRES_PORT:5432\n    volumes:\n      - ./db:/docker-entrypoint-initdb.d\n    healthcheck:\n      test: ["CMD-SHELL", "pg_isready"]\n      interval: 1s\n      timeout: 3s\n      retries: 30\n\n  redis:\n    image: redis:6.2-alpine\n    restart: always\n    env_file: ./.env\n    ports:\n      - $REDIS_PORT:6379\n    command: redis-server --save 20 1 --loglevel warning --requirepass $REDIS_PASSWORD\n    healthcheck:\n      test: ["CMD", "redis-cli", "ping"]\n      interval: 1s\n      timeout: 3s\n      retries: 30\n\n  zookeeper:\n    image: bitnami/zookeeper:latest\n    ports:\n      - "$ZK_PORT:2181"\n    environment:\n      - ALLOW_ANONYMOUS_LOGIN=yes\n\n  kafka:\n    image: bitnami/kafka:latest\n    depends_on:\n      - zookeeper\n    ports:\n      - "$KAFKA_PORT:9092"\n      - "$KAFKA_LISTENER_PORT:9093"\n    environment:\n      - ALLOW_PLAINTEXT_LISTENER=yes\n      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181\n      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT\n      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:$KAFKA_LISTENER_PORT\n      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://$KAFKA_HOST:$KAFKA_LISTENER_PORT\n      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT\n    restart: unless-stopped\n\n')),(0,o.kt)("h4",{id:"environment-1"},"Environment"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Variable"),(0,o.kt)("th",{parentName:"tr",align:null},"Used By"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"API_PORT"),(0,o.kt)("td",{parentName:"tr",align:null},"FastAPI"),(0,o.kt)("td",{parentName:"tr",align:null},"Port the FastAPI will run on")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"REDIS_HOST"),(0,o.kt)("td",{parentName:"tr",align:null},"FastAPI, Redis"),(0,o.kt)("td",{parentName:"tr",align:null},"Host where Redis cluster is running")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"REDIS_PORT"),(0,o.kt)("td",{parentName:"tr",align:null},"FastAPI, Redis"),(0,o.kt)("td",{parentName:"tr",align:null},"Port Redis will run on")))))}c.isMDXComponent=!0}}]);